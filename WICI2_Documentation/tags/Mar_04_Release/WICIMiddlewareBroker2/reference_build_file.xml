<?xml version="1.0" encoding="UTF-8"?>
<project name="Middleware build" default="build">
    <property file="local.properties"/>
    <property file="build.properties"/>
    
    <path id="cobertura.classpath">
        <fileset dir="${cobertura.dir}">
            <include name="cobertura.jar"/>
            <include name="dependancies/*.jar"/>
        </fileset>
    </path>
    
    <path id="app.classpath">
        <fileset dir="${app.lib.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${app.server.lib.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}">
            <include name="commons-logging-1.0.4.jar"/>
        </fileset>
    </path>
    
    <taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>
	
    <target name="init">
        <property name="server.app.deploy.dir" value="${server.dir}/${server.app.folder}"/>
        <property name="server.app.expanded.dir" value="${server.app.deploy.dir}/${middleware.name}"/>
        
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${war.dir}"/>
        <mkdir dir="${app.classes.dir}"/>
        <mkdir dir="${app.classes.debug.dir}"/>
        <mkdir dir="${test.unit.classes.dir}"/>
        <mkdir dir="${test.endtoend.classes.dir}"/>
        <mkdir dir="${instrumented.classes.dir}"/>
        <mkdir dir="${reports.dir}"/>
        <mkdir dir="${reports.xml.dir}"/>
        <mkdir dir="${coverage.xml.dir}"/>
        <mkdir dir="${coverage.summaryxml.dir}"/>
        <mkdir dir="${coverage.html.dir}"/>
    </target>
    
    <target name="create.war">
        <echo message="Creating WAR file..."/>
        <war destfile="${war.dir}/${war.file}" webxml="WebContent/WEB-INF/web.xml" update="true">
            <classes dir="${app.classes.dir}"/>
            <fileset dir="WebContent">
                <exclude name="WEB-INF/web.xml"/>
            </fileset>
        </war>
        <echo message="WAR File created."/>
    </target>
    
    <target name="delete.app.files" depends="init">
        <echo message="About to delete ${server.app.deploy.dir}\${war.file}"/>
        <delete file="${server.app.deploy.dir}\${war.file}" quiet="true"/>
        <echo message="${server.app.deploy.dir}\${war.file} deleted."/>
        
        <echo message="About to delete ${server.app.expanded.dir}"/>
        <delete file="${server.app.expanded.dir}" quiet="true"/>
        <echo message="${server.app.expanded.dir} deleted."/>
    </target>
    
    <target name="deploy.middleware" description="deploy" depends="init,delete.app.files">
        <echo message="Deploying to Middleware"/>
        
        <copy todir="${server.app.deploy.dir}">
            <fileset dir="${war.dir}">
                <include name="**/*.war"/>
            </fileset>
        </copy>
        <echo message="War file deployed."/>
    </target>
    
    <path id="test.lib.path">
        <fileset dir="${lib.dir}/develop" includes="*.jar" excludes="*-src.jar"/>
    </path>
    
    
    
    <target name="clean">
        <delete dir="${build.dir}" quiet="true"/>
        <delete dir="${reports.dir}" quiet="true"/>
        <delete file="cobertura.log"/>
        <delete file="cobertura.ser"/>
        <delete file="${server.app.deploy.dir}/${war.file}" quiet="true"/>
        <!--<delete dir="${server.app.deploy.dir}" quiet="true" />//-->
    </target>
    <target name="generate.version.number" >
    	<echo message="Generating Version Number"/>
          <propertyfile file="${build.version.properties.file}" comment="Auto generated by build edits will be lost">
            <entry key="version" value="${version.number}" operation="="/>			
        </propertyfile>
		<echo message="Version Number is ${version.number}"/>
		<echo message="Version Number generated."/>
    </target>
    
	<target name="app.compile" depends="init, generate.version.number">
        <property name="app.src.dir" location="${src.dir}"/>
        <javac includeantruntime="false" destdir="${app.classes.dir}" srcdir="${app.src.dir}" target="${target.version}" source="${source.version}">
            <classpath>
                <path refid="app.classpath"/>
            </classpath>
        </javac>
        <copy todir="${app.classes.dir}">
            <fileset dir="${app.src.dir}" excludes="**/*.java"/>
        </copy>     
    </target>
	
    <target name="app.compile.debug" depends="init, generate.version.number">
        <property name="app.src.dir" location="${src.dir}"/>
        
        <javac destdir="${app.classes.debug.dir}" srcdir="${app.src.dir}" target="${target.version}" source="${source.version}" debug="on">
            <classpath>
                <path refid="app.classpath"/>
            </classpath>
        </javac>
        
        
        <copy todir="${app.classes.debug.dir}">
            <fileset dir="${app.src.dir}" excludes="**/*.java"/>
        </copy>
        
    </target>
    
    <target name="test.unit.compile" depends="init">
        
        <javac includeantruntime="false" destdir="${test.unit.classes.dir}" srcdir="${test.unit.src.dir}" debug="on" target="${target.version}" source="${source.version}">
            <classpath>
                <path refid="test.lib.path"/>
                <path refid="app.classpath"/>
                <path location="${app.classes.dir}"/>
            </classpath>
        </javac>
    </target>
    
    <target name="test.unit.run" description="Run the tests" depends="init, test.unit.compile">
        
        <junit fork="true" haltonfailure="true">
            <sysproperty key="net.sourceforge.cobertura.datafile" file="cobertura.ser"/>
            
            <classpath>
                <path location="${test.unit.classes.dir}"/>
                <path refid="test.lib.path"/>
                <path refid="app.classpath"/>
                
                <!-- order of these next two class path entries is important to allow intrumentation to work -->
                <path location="${instrumented.classes.dir}"/>
                <path location="${app.classes.dir}"/>
                <!-- done important section -->
                
                <path refid="app.classpath"/>
                <path refid="cobertura.classpath"/>
            </classpath>
            
            <formatter type="xml"/>
            
            <batchtest todir="${reports.xml.dir}" failureProperty="test.unit.failed">
                <fileset dir="${test.unit.src.dir}" includes="**/*Test.java"/>
            </batchtest>
            
        </junit>
        
        <fail message="unit tests failed" if="test.unit.failed"/>
    </target>
    
    <target name="test.endtoend.compile" depends="init">
        
        <javac destdir="${test.endtoend.classes.dir}" srcdir="${test.endtoend.src.dir}" debug="on" target="${target.version}" source="${source.version}">
            <classpath>
                <path refid="test.lib.path"/>
                <path refid="app.classpath"/>
                <path location="${app.classes.dir}"/>
            </classpath>
        </javac>
    </target>
    
    <target name="test.endtoend.run" description="Run end to end tests" depends="init, app.compile, test.endtoend.compile">
        
        <junit fork="true">
            <sysproperty key="server" value="${server}"/>
            <sysproperty key="contextName" value="${contextName}"/>
            <classpath>
                <path location="${test.endtoend.classes.dir}"/>
                <path refid="test.lib.path"/>
                <path refid="app.classpath"/>
                <path location="${app.classes.dir}"/>
            </classpath>
            <formatter type="xml"/>
            <batchtest todir="${reports.xml.dir}" failureProperty="test.endtoend.failed">
                <fileset dir="${test.endtoend.src.dir}" includes="**/*Test.java"/>
            </batchtest>
            
        </junit>
        
        <fail message="end to end tests failed" if="test.endtoend.failed"/>
    </target>
    
    
    <target name="instrument" depends="init, app.compile">
        <cobertura-instrument todir="${instrumented.classes.dir}">
            <fileset dir="${app.classes.debug.dir}">
                <include name="**/*.class"/>
            </fileset>
        </cobertura-instrument>
    </target>
    
    <target name="coverage-check">
        <cobertura-check branchrate="34" totallinerate="100"/>
    </target>
    
    <target name="coverage-report">
        <!--
        Generate an XML file containing the coverage data using
        the "srcdir" attribute.
        -->
        <cobertura-report srcdir="${src.dir}" destdir="${coverage.xml.dir}" format="xml"/>
    </target>
    
    <target name="summary-coverage-report">
        <!--
        Generate an summary XML file containing the coverage data using
        the "srcdir" attribute.
        -->
        <cobertura-report srcdir="${src.dir}" destdir="${coverage.summaryxml.dir}" format="summaryXml"/>
    </target>
    
    <target name="alternate-coverage-report">
        <!--
        Generate a series of HTML files containing the coverage
        data in a user-readable form using nested source filesets.
        -->
        <cobertura-report destdir="${coverage.html.dir}">
            <fileset dir="${src.dir}">
                <include name="**/*.java"/>
            </fileset>
        </cobertura-report>
    </target>
    
    <target name="build" description="Clean, build, and full test" depends="clean, app.compile, test.unit.run, create.war"/>
    <target name="build.and.deploy.middleware" description="Clean, build, and full test, and deploy" depends="clean, app.compile, test.unit.run, create.war, deploy.middleware"/>
    <target name="test.coverage.run" description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports." depends="app.compile.debug, instrument, test.unit.run, coverage-report"/>
    
</project>