<?xml version="1.0" encoding="UTF-8"?>
<!--
Name should have no spaces and be only alpha characters.
The project name will be used to generate your .zip archive and .war file
-->
<project name="WICIWebApp3" default="build.debug.test" basedir="./">
    <description>
        WICIWebApp3
    </description>
    <property file="local.properties"/>
    <property file="build.properties"/>
    <path id="jruby.classpath">
        <fileset dir="${lib.dir}">
            <include name="jruby*.jar"/>
        </fileset>
    </path>

    <target name="compile.sass" description="compile sass files to css">
        <echo message="Compiling CSS..."/>
        <java classname="org.jruby.Main" fork="true" failonerror="true" classpathref="jruby.classpath">
            <arg line="conf/compass/compile.rb '${basedir}' compile '${basedir}/conf/compass'"/>
        </java>
        <echo message="CSS compiled."/>
    </target>

    <target name="watch.sass" description="watch sass files for changes and auto compile">
        <echo message="Watching CSS..."/>
        <java classname="org.jruby.Main" fork="true" failonerror="true" classpathref="jruby.classpath">
            <arg line="conf/compass/compile.rb '${basedir}' watch '${basedir}/conf/compass'"/>
        </java>
        <echo message="CSS watched."/>
    </target>

    <target name="init.js.list">
        <union id="js.include.base">
            <fileset dir="WebContent" includes="app/lib/*.js"/>
            <fileset dir="WebContent" includes="app/namespaceExists.js"/>
            <fileset dir="WebContent" includes="app/view/ext/jquery-1.7.1.js"/>

            <fileset dir="WebContent" includes="app/view/ext/jquery.tmpl.js"/>
            <fileset dir="WebContent" includes="app/view/ext/jquery.tmplPlus.js"/>

            <fileset dir="WebContent" includes="app/view/ext/jSignature/jSignature.js"/>

            <fileset dir="WebContent" includes="app/view/ext/${jquery.mobile.version}/${jquery.mobile.js.file}"/>
            <fileset dir="WebContent" includes="app/view/ext/jquery.jsonp-2.3.0.js"/>

            <fileset dir="WebContent" includes="app/view/ext/jquery.currency.js"/>
            <fileset dir="WebContent" includes="app/view/ext/jquery.scrollto.js"/>

            <fileset dir="WebContent" includes="app/view/ext/*.js"/>

            <fileset dir="WebContent" includes="app/*.js"/>
            <fileset dir="WebContent" includes="app/conf/connectionDetails.js"/>
            <fileset dir="WebContent" includes="**/controller/**/*.js"/>
            <fileset dir="WebContent" includes="app/view/js/*.js"/>
            <fileset dir="WebContent" includes="app/bundles/*.js"/>
        </union>
        <!-- cordova.js must be included first -->
        <!-- PhoneGap   Android //-->
        <union id="js.include.cordova.android">
<!--             <fileset dir="WebContent" includes="app/lib/cordova/android/cordova.js"/> -->
<!--             <fileset dir="WebContent" includes="app/lib/cordova/android/cordova_plugins.js"/> -->
<!--             <fileset dir="WebContent" includes="app/lib/cordova/android/plugins/cordova-plugin-whitelist/whitelist.js"/> -->
        </union>
<!--         for debug begin  -->
         <union id="js.include.debug.cordova.android">
             <fileset dir="WebContent" includes="app/lib/cordova/android/cordova.js"/>  
        </union>
        <union id="js.include.debug">
            <union refid="js.include.base"/>
            <union refid="js.include.debug.cordova.android"/>
        </union>
<!--         for debug  end  -->
         
        <union id="js.include">
            <union refid="js.include.base"/>
            <union refid="js.include.cordova.android"/>
        </union>
    </target>

    <target name="clean" description="clean up">
        <echo message="Deleting ${build.dir} directory..."/>
        <delete dir="${build.dir}"/>
        <echo message="${build.dir} directory deleted."/>
    </target>

    <target name="create.dirs" description="create directories">
        <echo message="Creating ${minified.dir} directory..."/>
        <mkdir dir="${minified.dir}"/>
        <echo message="Creating ${concatenated.dir} directory..."/>
        <mkdir dir="${concatenated.dir}"/>
        <echo message="Creating ${production.output.dir} directory..."/>
        <mkdir dir="${production.output.dir}"/>
        <echo message="Creating ${production.output.images.dir} directory..."/>
        <mkdir dir="${production.output.images.dir}"/>
        <echo message="Creating ${production.output.dir.war.file} directory..."/>
        <mkdir dir="${production.output.dir.war.file}"/>
        <echo message="Creating ${production.output.dir.ear.file} directory..."/>
        <mkdir dir="${production.output.dir.ear.file}"/>
    </target>

    <target name="init" depends="clean">
        <echo message="Initializing Build Properties..."/>
        <mkdir dir="${build.dir}"/>
        <property name="packaging.dir" value="${build.dir}/zipped"/>
        <property name="debug.output.dir" value="${build.dir}/debug"/>
        <property name="debug.output.images.dir" value="${build.dir}/debug/app/images"/>
        <property name="debug.output.jquery.mobile.images.dir" value="${build.dir}/images"/>
        <property name="production.output.dir" value="${build.dir}/production"/>
        <property name="production.output.images.dir" value="${build.dir}/production/app/images"/>
        <property name="production.output.jquery.mobile.images.dir" value="${build.dir}/images"/>
        <property name="local.middleware.dir" value="${local.tomcat.path}/${middleware.name}"/>
        <property name="production.output.dir.war.file" value="${build.dir}/production_war_file"/>
        <property name="production.output.dir.ear.file" value="${build.dir}/production_ear_file"/>
        <echo message="Build Properties Initialized."/>
    </target>

    <target name="js.lint.validation">
        <exec executable="jslint/run-validation.sh" resolveexecutable="true" dir="jslint" osfamily="unix">
        </exec>
    </target>

    <!--Dynamic creation of configuration file. Dont need this now, but we may need it in the future //-->
    <!--Extra lines in this configuration file will break the jsTest Driver //-->
    <target name="js.test.configure">
        <echo message="Configuring JS Test Runner..."/>
        <echo file="${js.test.conf.file}">server: http://localhost:42442
load:
  - "WebContent/app/lib/*.js"
  - "testJs/libs/jasmine-core-1.1.0/jasmine.js"
  - "testJs/libs/jasmine-jstd-adaptor/JasmineAdapter.js"
  - "testJs/libs/*.js"
  - "WebContent/app/view/ext/jquery-1.7.1.js"
  - "WebContent/app/view/ext/jquery.tmpl.js"
  - "WebContent/app/view/ext/jquery.tmplPlus.js"
  - "WebContent/app/view/ext/jquery.mobile-1.0/jquery.mobile-1.0.js"
  - "WebContent/app/view/ext/jquery.i18n.js"
  - "WebContent/app/view/ext/jquery.currency.js"
  - "WebContent/app/namespaceExists.js"
  - "WebContent/app/*.js"
  - "WebContent/app/controller/*.js"
  - "WebContent/app/controller/helpers/*.js"
  - "WebContent/app/controller/models/*.js"
  - "WebContent/app/controller/network/*.js"
  - "WebContent/app/controller/flow/*.js"
  - "WebContent/app/controller/Dialogs/*.js"
  - "WebContent/app/bundles/*.js"
  - "testJs/unit/*.js"
  - "testJs/unit/flowTests/*.js"</echo>
        <echo message="JS Test Runner configured."/>
    </target>

    <!--May need this in the future//-->
    <!--<target name="js.test.unit" description="unit test" depends="js.test.configure">//-->
    <target name="js.test.unit" description="unit test">
        <echo message="Running JS Unit Tests..."/>
    	<echo message="Browser path... ${browser.path}"/> 
        <delete dir="${js.test.unit.report.dir}"/>
        <mkdir dir="${js.test.unit.report.dir}"/>
        <mkdir dir="${js.test.unit.report.dir}/coverage"/>
        <java jar="${js.lib.jstestdriver}" fork="true" failonerror="true">
            <arg value="--port"/>
            <arg value="42442"/>
            <arg value="--browser"/>
            <arg value="${browser.path}"/>
            <arg value="--tests"/>
            <arg value="all"/>
            <arg value="--testOutput"/>
            <arg value="${js.test.unit.report.dir}"/>
            <arg value="--config"/>
            <arg value="${js.test.conf.file}"/>
        </java>
        <echo message="JS Unit Tests Completed."/>
    </target>

    <target name="set.version.number" depends="init,create.dirs">
        <echo message="Setting Version File... to version ${version.number}"/>
        <echo file="${version.file}">WICI.version = "${version.major}.${version.minor}.${version.patch}.${version.buildEnv}.${version.build}";</echo>
        <echo message="Version File Set."/>
    </target>

    <target name="debug.mode.on" description="set a flag to use build status at project code">
        <echo message="Creating debugging mode indicator..."/>
        <echo append="true" file="${version.file}">${line.separator}WICI.debuggingMode = true;</echo>
    </target>

    <target name="deploy.debug" description="Deploy Debug Version to Application Server">
        <echo message="Deploying ${deploy.content.debug} (Debug) to Local Middleware..."/>
        <delete dir="${deployed.webcontent.dir}"/>
        <mkdir dir="${deployed.webcontent.dir}"/>
        <copy overwrite="true" todir="${deployed.webcontent.dir}">
            <fileset dir="${deploy.content.debug}">
                <include name="**/*"/>
            </fileset>
        </copy>
        <echo message="Development files deployed."/>
    </target>

    <target name="deploy.production" description="Deploy Production Version to Application Server">
        <echo message="Deploying ${deploy.content.production} (Production) to Local Middleware..."/>
        <delete dir="${deployed.webcontent.dir}"/>
        <mkdir dir="${deployed.webcontent.dir}"/>
        <copy overwrite="true" todir="${deployed.webcontent.dir}">
            <fileset dir="${deploy.content.production}">
                <include name="**/*"/>
            </fileset>
        </copy>
        <echo message="Production WebContent deployed."/>
    </target>

    <target name="create.debug.output">
        <echo message="Copying Debug files to output folder..."/>
        <copy todir="${debug.output.dir}">
            <fileset dir="WebContent">
                <include name="**/*.html"/>
                <include name="**/*.ico"/>
                <include name="**/*.png"/>
                <include name="**/*.gif"/>
                <include name="**/*.jpg"/>
                <include name="**/*.js"/>
                <include name="**/*.css"/>
            </fileset>
        </copy>
        <echo message="Debug files copied."/>
    </target>

    <target name="create.production.output" depends="minify.for.production">
        <echo message="Creating Production Output Files..."/>
        <!-- Copy index.html//-->
        <copy todir="${production.output.dir}">
            <fileset dir="${concatenated.dir}">
                <include name="**/*.html"/>
            </fileset>
        </copy>
        <!-- Copy Project images//-->
        <copy todir="${production.output.images.dir}">
            <fileset dir="WebContent/app/images">
                <include name="**/*.ico"/>
                <include name="**/*.png"/>
                <include name="**/*.gif"/>
                <include name="**/*.jpg"/>
            </fileset>
        </copy>
        <!-- Copy jQuery Mobile CSS images//-->
        <copy todir="${production.output.images.dir}">
            <fileset dir="WebContent/app/view/ext/${jquery.mobile.version}/images">
                <include name="**/*.ico"/>
                <include name="**/*.png"/>
                <include name="**/*.gif"/>
            </fileset>
        </copy>
        <!-- Copy Translation Files//-->
        <copy todir="${production.output.dir}/app/bundles">
            <fileset dir="WebContent/app/bundles">
                <include name="**/*.properties"/>
            </fileset>
        </copy>
         <!-- Copy cordova Files//-->
        <copy todir="${production.output.dir}/app">
            <fileset dir="WebContent/app/lib/cordova/android">
                <include name="**/*.*"/>
            </fileset>
        </copy>
        <echo message="Production Output Files Created."/>
    </target>

    <target name="post.processing.production.output">
        <echo message="Placing all images in one location and updating references.."/>
        <replace file="${production.output.dir}/app/${css.filename}" token="../../images/" value="images/"/>
        <replace file="${production.output.dir}/app/${css.filename}" token="../ext/${jquery.mobile.version}/images/" value="images/"/>
        <echo message="Image references updated."/>
    </target>

    <target name="copy.production.files.somewhere">
        <echo message="Copying production files from ${build.dir}/production to ${copy.to.location.production}"/>
        <copy overwrite="true" todir="${copy.to.location.production}">
            <fileset dir="${build.dir}/production">
                <include name="**/*.*"/>
            </fileset>
        </copy>
    </target>

    <target name="copy.debug.files.somewhere">
        <echo message="Copying debug files from ${build.dir}/debug to ${copy.to.location.debug}"/>
        <copy overwrite="true" todir="${copy.to.location.debug}">
            <fileset dir="${build.dir}/debug">
                <include name="**/*.*"/>
            </fileset>
        </copy>
    </target>

    <target name="generate.connection.details">
        <echo message="Generating Global Connection Details File..."/>
        <echo file="WebContent/app/conf/connectionDetails.js">
            ensureNamespaceExists();
            WICI.physicalserverURL      = "${physicalserver.name}";
            WICI.thisWebappName         = "${thisWebapp.name}";
            WICI.middlewareName         = "${middleware.name}";
            WICI.webservicesEndpoint    = "${webservices.endpoint}";
            WICI.webservicesIP          = "${webservices.IP}";
        </echo>
        <echo message="Global Connection Details File Generated."/>
    </target>

    <target name="css.production.concat" depends="init, create.dirs, compile.sass">
        <echo message="Concatenating CSS files..."/>
        <concat outputencoding="UTF8" encoding="UTF8" fixlastline="true" destfile="${concatenated.css.file}">
            <fileset dir="WebContent" includes="**/app/view/ext/${jquery.mobile.version}/${jquery.mobile.css.file}"/>
            <fileset dir="WebContent" includes="**/app/view/ext/jQMProgressBar/jQMProgressBar.css"/>
            <fileset dir="WebContent" includes="**/app/view/css/${css.filename}"/>
        </concat>
        <echo message="Concatenated css built."/>
    </target>

    <target name="js.production.concat" depends="init,create.dirs,generate.connection.details,init.js.list">
        <echo message="Concatenating JavaScript files..."/>
        <pathconvert pathsep="${line.separator}" dirsep="/" property="jsfiles" refid="js.include">
        </pathconvert>
        <echo>            
            ${jsfiles}
        </echo>
        <echo message="${js.include}"/>
        <concat outputencoding="UTF8" encoding="UTF8" fixlastline="true" destfile="${concatenated.js.file}">
            <union refid="js.include"/>
        </concat>
        <echo message="Concatenated Javascript Files Built."/>
    </target>

    <target name="html.production.reconstitute" depends="init,create.dirs" description="Reconstitute production index.html">
        <echo message="Reconstituting index.html..."/>
        <concat outputencoding="UTF8" encoding="UTF8" fixlastline="true" destfile="${concatenated.index.html.file}">
            <fileset dir="${lib.dir}" includes="**/index.part1.html"/>
            <fileset dir="${lib.dir}" includes="**/index.production.includes.html"/>
            <fileset dir="${basedir}/WebContent/app/view/templates" includes="**/*.html"/>
            <fileset dir="${lib.dir}" includes="**/index.part2.html"/>
        </concat>
        <echo message="Reconstituted Production index.html."/>
    </target>

    <target name="produce.js.list" depends="init,create.dirs,generate.connection.details,init.js.list">
        <echo message="Creating list of Javascript includes for debug version of index.html..."/>

        <pathconvert pathsep="" dirsep="/" property="basedir.corrected">
            <path location="WebContent"/>
        </pathconvert>
        <pathconvert pathsep="${line.separator}" dirsep="/" property="jsfiles" refid="js.include.debug">
        </pathconvert>
        <echo file="${js.include.files.debug}">
            ${jsfiles}
        </echo>
        <replace token="${basedir.corrected}/" value="" file="${js.include.files.debug}"/>
        <replaceregexp match="^(.*)$" replace="${js.script.wrap.expression}" byline="true" file="${js.include.files.debug}"/>

        <echo message="List of Javascript includes created."/>
    </target>

    <target name="produce.css.list">
        <echo message="Creating list of CSS includes for debug version of index.html..."/>
        <echo file="${lib.dir}/${css.include.files.debug}">
            &lt;link rel="stylesheet" type="text/css" href="app/view/ext/${jquery.mobile.version}/${jquery.mobile.css.file}"/&gt;
            &lt;link rel="stylesheet" type="text/css" href="app/view/ext/jQMProgressBar/jQMProgressBar.css"/&gt;
            &lt;link rel="stylesheet" type="text/css" href="app/view/css/${css.filename}"/&gt;
        </echo>
        <echo message="List of CSS includes created."/>
    </target>

    <target name="html.debug.reconstitute" depends="init,create.dirs,produce.css.list,produce.js.list" description="Reconstitute index.html">
        <echo message="Reconstituting debug index.html..."/>
        <concat outputencoding="UTF8" encoding="UTF8" fixlastline="true" destfile="${index.html.file.debug}">
            <fileset dir="${lib.dir}" includes="**/index.part1.html"/>
            <fileset dir="${lib.dir}" includes="**/${css.include.files.debug}"/>
            <fileset dir="${lib.dir}" includes="**/index.debug.includes.html"/>
            <fileset dir="${basedir}/WebContent/app/view/templates" includes="**/*.html"/>
            <fileset dir="${lib.dir}" includes="**/index.part2.html"/>
        </concat>
        <echo message="Reconstituted Debug index.html."/>
    </target>

    <target name="css.concat" depends="init,create.dirs, compile.sass">
        <echo message="Concatenating CSS files..."/>
        <concat outputencoding="UTF8" encoding="UTF8" fixlastline="true" destfile="${concatenated.css.file}">
            <fileset dir="WebContent" includes="**/app/view/ext/${jquery.mobile.version}/${jquery.mobile.css.file}"/>
            <fileset dir="WebContent" includes="**/app/view/css/${css.filename}"/>
        </concat>
        <echo message="CSS files concatenated."/>
    </target>

    <target name="js.concat" depends="init,create.dirs,produce.js.list">
        <echo message="Concatenating Android JavaScript Files..."/>
        <concat outputencoding="UTF8" encoding="UTF8" fixlastline="true" destfile="${concatenated.js.file}">
            <union refid="js.include"/>
        </concat>
        <echo message="Android Javascript Files Concatenated."/>
    </target>

    <target name="minify.for.production" depends="init,create.dirs">
        <echo message="Minifying css and js for Production..."/>
        <!--available file="${lib.dir}/YUIAnt.jar" property="YUIANT_AVAILABLE"/>
        <fail unless="YUIANT_AVAILABLE" message="Run jar target to generate the required task"/>

        <taskdef name="yuicompress" classname="com.yahoo.platform.yui.compressor.YUICompressTask">
            <classpath>
                <pathelement path="${lib.dir}/yuicompressor-2.4.8.jar"/>
                <pathelement path="${lib.dir}/YUIAnt.jar"/>
            </classpath>
        </taskdef>

        <yuicompress linebreak="300" warn="false" charset="UTF-8" preserveallsemicolons="true" outputfolder="${production.output.dir}/app">
            <fileset dir="${concatenated.dir}">
                <include name="**/${js.filename}"/>
                <include name="**/${css.filename}"/>
            </fileset>
        </yuicompress-->
    	
    	<copy todir="${production.output.dir}/app">
            <fileset dir="${concatenated.dir}">
                <include name="**/${js.filename}"/>
                <include name="**/${css.filename}"/>
            </fileset>
    	</copy>
    	
        <echo message="Production Minification complete."/>
    </target>

    <target name="zip" depends="init,create.dirs,create.production.output">
        <zip destfile="${build.dir}/${ant.project.name}.zip"
         excludes="build,.project,.classpath,/*.properties,build.xml, app/view/sass/**, reports/**, endToEnd/**, testJs/**, *.log, *.conf,/*settings, bin, src"
         basedir="${packaging.dir}"/>
    </target>

    <target name="reconfigure.for.environment">
        <echo message="Reconfiguring URL for Virtual Domain..."/>
        <replace file="${config.file.location}" token="${middleware.name}" value="${reconfigure.environment.middleware.url}"/>
        <echo message="URL Reconfigured."/>
    </target>

    <target name="create.war" description="Export to War">
        <war destfile="${war.file}" webxml="WebContent/WEB-INF/web.xml" update="true">
            <classes dir="build/classes/eclipse"/>
            <fileset dir="WebContent">
                <!--<exclude name="WEB-INF/web.xml"/>//-->
            </fileset>
        </war>
    </target>

    <target name="copy.production.archives.somewhere">
        <echo message="Copying production files from ${build.dir}/production to ${copy.to.location.production}"/>
        <copy overwrite="true" todir="${copy.to.archive.location.production}">
            <fileset dir="${production.output.dir.war.file}">
                <include name="**/*.*"/>
            </fileset>
            <fileset dir="${production.output.dir.ear.file}">
               <include name="**/*.*"/>
            </fileset>
        </copy>
    </target>

    <target name="copy.production.ear.somewhere">
        <tstamp>
            <format property="date.time.stamp" pattern="MMddyyyy_hhmmaa" timezone="GMT-5"/>
        </tstamp>

        <echo message="Copying ear file from ${production.output.dir.ear.file}/${thisWebapp.name}.ear to ${copy.to.archive.location.production}/${version.major}.${version.minor}.${version.patch}.${version.buildEnv}.${version.build}_${date.time.stamp}_${new.ear.filename}"/>
        <copy file="${production.output.dir.ear.file}/${thisWebapp.name}.ear" overwrite="true" tofile="${copy.to.archive.location.production}/${version.major}.${version.minor}.${version.patch}.${version.buildEnv}.${version.build}_${date.time.stamp}_${new.ear.filename}"/>
        <echo message="${copy.to.archive.location.production}/${version.major}.${version.minor}.${version.patch}.${version.buildEnv}.${version.build}_${date.time.stamp}_${new.ear.filename} copied."/>
    </target>

    <target name="create.production.war.file">
        <echo message="Creating Production WAR File..."/>
        <!-- Create temporary folder for war package content //-->
        <mkdir dir="${production.output.dir.war.file}/temporary"/>
        <copy todir="${production.output.dir.war.file}/temporary">
            <!-- Copy app folder and index.html file //-->
            <fileset dir="${build.dir}/production">
                <include name="**/*"/>
            </fileset>
            <!-- Copy war_contents folder contents //-->
            <fileset dir="${war.contents.dir}">
                <include name="**/*"/>
            </fileset>
        </copy>
        <jar jarfile="${production.output.dir.war.file}/${thisWebapp.name}.war" basedir="${production.output.dir.war.file}/temporary"></jar>
        <delete dir="${production.output.dir.war.file}/temporary"/>
    </target>

    <target name="create.production.ear.file">
        <echo message="Creating Production EAR File..."/>
        <!-- Create temporary folder for war package content //-->
        <mkdir dir="${production.output.dir.ear.file}/temporary"/>
        <copy todir="${production.output.dir.ear.file}/temporary">
            <!-- Copy war file //-->
            <fileset dir="${production.output.dir.war.file}">
                <include name="${thisWebapp.name}.war"/>
            </fileset>
            <!-- Copy ear_contents folder contents //-->
            <fileset dir="${ear.contents.dir}">
                <include name="**/*"/>
            </fileset>
        </copy>
        <jar jarfile="${production.output.dir.ear.file}/${thisWebapp.name}.ear" basedir="${production.output.dir.ear.file}/temporary"></jar>
        <delete dir="${production.output.dir.ear.file}/temporary"/>
    </target>

    <!--Build Targets //-->
	
    <target name="build.all.no.tests" depends="set.version.number,css.concat,js.concat,html.debug.reconstitute,create.debug.output,css.production.concat,js.production.concat,html.production.reconstitute,create.production.output,post.processing.production.output" description="build all with no tests"/>
    <target name="build.all.test" depends="js.test.unit,build.all.no.tests" description="build all with tests"/>

    <target name="build.all.no.tests.create.war.file" depends="build.all.no.tests,create.production.war.file" description="build all without tests and create WAR file for production"/>
    <target name="build.all.no.tests.create.war.and.ear.files" depends="build.all.no.tests,create.production.war.file,create.production.ear.file" description="build all without tests and create WAR and EAR files for production"/>
    <target name="build.all.no.tests.copy.files.create.war.and.ear.files" depends="build.all.no.tests.create.war.and.ear.files,copy.debug.files.somewhere,copy.production.files.somewhere" description="build all without no tests then copy all somewhere and create WAR and EAR files for production"/>
    <target name="build.all.no.tests.copy" depends="build.all.no.tests,copy.debug.files.somewhere,copy.production.files.somewhere" description="build all without tests then copy web files somewhere"/>

    <target name="build.all.test.copy" depends="build.all.test,copy.debug.files.somewhere,copy.production.files.somewhere" description="build all with tests then copy web files somewhere"/>
    <target name="build.all.test.create.war.and.ear.files" depends="build.all.test,create.production.war.file,create.production.ear.file" description="build all with tests and create WAR and EAR files for production"/>
    <target name="build.all.test.copy.web.and.ear.files" depends="build.all.test.create.war.and.ear.files,copy.debug.files.somewhere,copy.production.files.somewhere,copy.production.ear.somewhere" description="build all with tests, copy files somewhere copy EAR file for production somewhere"/>

    <target name="build.debug.no.tests" depends="set.version.number,debug.mode.on,css.concat,js.concat,html.debug.reconstitute,create.debug.output" description="build for debugging with no tests"/>
    <target name="build.debug.test" depends="js.test.unit,build.debug.no.tests" description="build for debugging"/>
    <target name="build.debug.test.copy" depends="build.production.test,copy.debug.files.somewhere" description="build for debug then copy somewhere"/>

    <target name="build.production.no.tests" depends="set.version.number,css.production.concat,js.production.concat,html.production.reconstitute,create.production.output,post.processing.production.output" description="build for production no tests"/>
    <target name="build.production.test" depends="js.test.unit,build.production.no.tests" description="build for production"/>
    <target name="build.production.test.copy" depends="build.production.test,copy.production.files.somewhere" description="build for production then copy somewhere"/>
    <target name="build.production.no.test.copy" depends="build.production.no.tests,copy.production.files.somewhere" description="build for production then copy somewhere"/>
    
    <!-- Build and Deploy Targets //-->

    <target name="build.debug.test.and.deploy" depends="build.debug.test,deploy.debug" description="build and deploy for debugging"/>
    <target name="build.debug.no.tests.and.deploy" depends="build.debug.no.tests,deploy.debug" description="build and deploy for debugging with no tests"/>

    <target name="build.production.test.and.deploy" depends="build.production.test,deploy.production" description="build for production"/>
    <target name="build.production.no.tests.and.deploy" depends="build.production.no.tests,deploy.production" description="build for production no tests"/>

    <target name="build.all.test.and.deploy" depends="build.production.test.and.deploy,build.debug.test.and.deploy" description="build and deploy for all with tests"/>
    

</project>